// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: product.proto

/*
Package product is a generated protocol buffer package.

It is generated from these files:
	product.proto

It has these top-level messages:
	Supplier
	Product
*/
package product

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ScmProduct service

type ScmProductService interface {
	GetProduct(ctx context.Context, in *Supplier, opts ...client.CallOption) (*Product, error)
	GetAllProduct(ctx context.Context, in *Supplier, opts ...client.CallOption) (*Product, error)
}

type scmProductService struct {
	c    client.Client
	name string
}

func NewScmProductService(name string, c client.Client) ScmProductService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "scmproduct"
	}
	return &scmProductService{
		c:    c,
		name: name,
	}
}

func (c *scmProductService) GetProduct(ctx context.Context, in *Supplier, opts ...client.CallOption) (*Product, error) {
	req := c.c.NewRequest(c.name, "ScmProduct.GetProduct", in)
	out := new(Product)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scmProductService) GetAllProduct(ctx context.Context, in *Supplier, opts ...client.CallOption) (*Product, error) {
	req := c.c.NewRequest(c.name, "ScmProduct.GetAllProduct", in)
	out := new(Product)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ScmProduct service

type ScmProductHandler interface {
	GetProduct(context.Context, *Supplier, *Product) error
	GetAllProduct(context.Context, *Supplier, *Product) error
}

func RegisterScmProductHandler(s server.Server, hdlr ScmProductHandler, opts ...server.HandlerOption) {
	type scmProduct interface {
		GetProduct(ctx context.Context, in *Supplier, out *Product) error
		GetAllProduct(ctx context.Context, in *Supplier, out *Product) error
	}
	type ScmProduct struct {
		scmProduct
	}
	h := &scmProductHandler{hdlr}
	s.Handle(s.NewHandler(&ScmProduct{h}, opts...))
}

type scmProductHandler struct {
	ScmProductHandler
}

func (h *scmProductHandler) GetProduct(ctx context.Context, in *Supplier, out *Product) error {
	return h.ScmProductHandler.GetProduct(ctx, in, out)
}

func (h *scmProductHandler) GetAllProduct(ctx context.Context, in *Supplier, out *Product) error {
	return h.ScmProductHandler.GetAllProduct(ctx, in, out)
}
